@page "/customer-manage"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject IModalService Modal

<h3>
    Manage Customers
    <a href="list-invoices-by-id">
        <button class="btn" style="background-color:orange">
            <span style="font-weight:700; color:white">Back To Invoices</span>
        </button>
    </a>

    <button class="btn" style="background-color:lawngreen; float:right" @onclick="@(()=> Modal.Show<CreateComponent>())">
        <span style="font-weight:700; color:white">Create</span>
    </button>
</h3>

@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="bg-dark text-white">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Surname</th>
                <th>username</th>
                <th>Password</th>
                <th>Tax Administration</th>
                <th>Bank Account Number</th>
                <th><!--Edit--></th>
                <th><!--Delete--></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var customer in customers)
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.Username</td>
                    <td>@customer.Password</td>
                    <td>@customer.TaxAdministration</td>
                    <td>@customer.BankAccountNumber</td>
                    <td><button class="btn btn-info" @onclick="@(()=> ShowTheEditModal(customer.Id))">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="(() => TakeIdForDelete(customer.Id))">Delete</button></td>
                </tr>
            }



        </tbody>
    </table>
}

@if (isDelete)
{
    <DeleteDialogBox Title="WARNING !!!" Text="Are you sure for delete operation?" OnClose="OnClose"></DeleteDialogBox>
}

@code
{
    public Customer customerForUpdate = new Customer();

    public bool isEdit = false;
    public bool isDelete = false;
    public bool operationKey = false;
    public bool isChange = true;

    public int customerId = 0;

    /*public void TakeIdForEdit(int id)
    {
        customerId = id;
        isEdit = true;
    }*/

    /*public async void UpdateCustomer()
    {
        customerForUpdate.Id = customerId;
        customers.Where(x => x.Id == customerId).FirstOrDefault().Id = customerForUpdate.Id;
        customers.Where(x => x.Id == customerId).FirstOrDefault().Name = customerForUpdate.Name;
        customers.Where(x => x.Id == customerId).FirstOrDefault().Surname = customerForUpdate.Surname;
        customers.Where(x => x.Id == customerId).FirstOrDefault().Username = customerForUpdate.Username;
        customers.Where(x => x.Id == customerId).FirstOrDefault().Password = customerForUpdate.Password;
        customers.Where(x => x.Id == customerId).FirstOrDefault().TaxAdministration = customerForUpdate.TaxAdministration;
        customers.Where(x => x.Id == customerId).FirstOrDefault().BankAccountNumber = customerForUpdate.BankAccountNumber;

        await Http.PutAsJsonAsync<Customer>("api/Customers", customerForUpdate);
    }*/

    public Customer customerFromEditComponent = new Customer();

    public async void ShowTheEditModal(int id)
    {
        var parameters1 = new ModalParameters();
        parameters1.Add(nameof(EditComponent.CustomerId), id);

        var editComponent = Modal.Show<EditComponent>("", parameters1);
        var result = await editComponent.Result;

        @if (!result.Cancelled)
        {
            var customerString = result.Data.ToString();
            string[] array = customerString.Split(",");
            customerFromEditComponent.Id = Int32.Parse(array[0]);
            customerFromEditComponent.Name = array[1];
            customerFromEditComponent.Surname = array[2];
            customerFromEditComponent.Username = array[3];
            customerFromEditComponent.Password = array[4];
            customerFromEditComponent.TaxAdministration = array[5];
            customerFromEditComponent.BankAccountNumber = array[6];
            customers.Remove(customers.Where(x => x.Id == customerFromEditComponent.Id).FirstOrDefault());
            customers.Add(customerFromEditComponent);

            if (isChange == true)
            {
                isChange = false;
            }
            else
            {
                isChange = true;
            }
            UriHelper.NavigateTo("customer-manage1");
        }
    }

    public async void ShowTheCreateModal()
    {
        
    }

    //Deleting
    public void OnClose(bool _key)
    {
        isDelete = false;
        operationKey = _key;
        NewMethod(customerId);
    }
    public void NewMethod(int id)
    {
        if (operationKey)
        {
            Http.DeleteAsync($"api/Customers/{id}");
            var x = customers.Where(i => i.Id == id).ToList();
            customers.Remove(x.First());
            isDelete = false;
        }
    }
    public void TakeIdForDelete(int id)
    {
        customerId = id;
        isDelete = true;
    }

    //api consuming
    private List<Customer> customers;
    protected override async Task OnInitializedAsync()
    {
        customers = await Http.GetFromJsonAsync<List<Customer>>("api/Customers");
    }
}
